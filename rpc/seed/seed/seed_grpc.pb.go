// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.12
// source: seed.proto

package seed

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// SeedServiceClient is the client API for SeedService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SeedServiceClient interface {
	AddSeed(ctx context.Context, in *SeedAddRequest, opts ...grpc.CallOption) (*SeedAddResponse, error)
}

type seedServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewSeedServiceClient(cc grpc.ClientConnInterface) SeedServiceClient {
	return &seedServiceClient{cc}
}

func (c *seedServiceClient) AddSeed(ctx context.Context, in *SeedAddRequest, opts ...grpc.CallOption) (*SeedAddResponse, error) {
	out := new(SeedAddResponse)
	err := c.cc.Invoke(ctx, "/seed.SeedService/AddSeed", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SeedServiceServer is the server API for SeedService service.
// All implementations must embed UnimplementedSeedServiceServer
// for forward compatibility
type SeedServiceServer interface {
	AddSeed(context.Context, *SeedAddRequest) (*SeedAddResponse, error)
	mustEmbedUnimplementedSeedServiceServer()
}

// UnimplementedSeedServiceServer must be embedded to have forward compatible implementations.
type UnimplementedSeedServiceServer struct {
}

func (UnimplementedSeedServiceServer) AddSeed(context.Context, *SeedAddRequest) (*SeedAddResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddSeed not implemented")
}
func (UnimplementedSeedServiceServer) mustEmbedUnimplementedSeedServiceServer() {}

// UnsafeSeedServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SeedServiceServer will
// result in compilation errors.
type UnsafeSeedServiceServer interface {
	mustEmbedUnimplementedSeedServiceServer()
}

func RegisterSeedServiceServer(s grpc.ServiceRegistrar, srv SeedServiceServer) {
	s.RegisterService(&SeedService_ServiceDesc, srv)
}

func _SeedService_AddSeed_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SeedAddRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SeedServiceServer).AddSeed(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/seed.SeedService/AddSeed",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SeedServiceServer).AddSeed(ctx, req.(*SeedAddRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// SeedService_ServiceDesc is the grpc.ServiceDesc for SeedService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SeedService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "seed.SeedService",
	HandlerType: (*SeedServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddSeed",
			Handler:    _SeedService_AddSeed_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "seed.proto",
}
